!import:mrfmsim.model.Experiment
name: CermitTimeDependentSmallTip
# version: 2022.11.17
description: Simulates a Cornell-style frequency shift magnetic resonance force
    microscope experiment considering the time dependent nature of the saturation,
    averaged over multiple pulses and with small step approximation. The function
    is modified for small tip, where the field calculation uses trapezoidal integral. 
graph:
    !graph
    name: cornell_td_esr_smalltip_graph
    grouped_edges:
        - [convert microwave x_0p, [extended ogrid, relative polarization change]]
        - [extended ogrid, extended sample ogrid]
        - [extended sample ogrid, extended Bz]
        - [sample ogrid, trapezoid Bzxx]
        - [extended sample ogrid, extended Bzx]
        - [extended Bz, extended B total]
        - [extended B total, [B total, extended B offset]]
        - [B total, equilibrium magnetization per spin]
        - [[extended B offset, extended Bzx], relative polarization change]
        - [relative polarization change, averaged relative polarization change]
        - [[equilibrium magnetization per spin, trapezoid Bzxx, averaged relative polarization change], spring constant shift]
        - [spring constant shift, frequency shift]
    node_objects:
        convert microwave x_0p:
            func: !import mrfmsim_marohn.formula.convert_grid_pts
            inputs: [mw_x_0p, grid_step]
            output: ext_pts
        extended ogrid:
            func: !execute extend_grid_method(ext_pts)
            output: ext_ogrid
        extended sample ogrid:
            func: !import mrfmsim_marohn.formula.ogrid_sub
            inputs: [ext_ogrid, h]
            output: ext_sample_ogrid
        extended Bz:
            func: !execute Bz_method(*ext_sample_ogrid)
            output: ext_Bz
        B total:
            func: !import mrfmsim_marohn.formula.slice_matrix
            inputs: [ext_B_tot, grid_shape]
            output: B_tot
        extended B total:
            func: !import operator.add
            inputs: [ext_Bz, B0]
            output: ext_B_tot
        sample ogrid:
            func: !import mrfmsim_marohn.formula.ogrid_sub
            inputs: [grid_array, h]
            output: sample_ogrid
        extended Bzx:
            func: !execute Bzx_method(*ext_sample_ogrid)
            output: ext_Bzx
        trapezoid Bzxx:
            func: !import mrfmsim_marohn.formula.xtrapz_field_gradient
            output: trapz_Bzxx
        equilibrium magnetization per spin:
            func: !import mrfmsim_marohn.formula.mz_eq
            output: mz_eq
        extended B offset:
            func: !import mrfmsim_marohn.formula.B_offset
            inputs: [ext_B_tot, f_rf, Gamma]
            output: ext_B_offset    
        relative polarization change:
            func: !import mrfmsim_marohn.formula.rel_dpol_sat_td_smallsteps
            output: rel_dpol
        averaged relative polarization change:
            func: !import mrfmsim_marohn.formula.rel_dpol_multipulse
            output: rel_dpol_avg
        spring constant shift:
            func: !func "lambda trapz_Bzxx, rel_dpol_avg, mz_eq, spin_density, grid_voxel:
                (trapz_Bzxx * rel_dpol_avg * mz_eq * spin_density * grid_voxel).sum()"
            output: dk_spin
        frequency shift:
            func: !execute dk_to_df_modulated(dk_spin)
            output: df_spin
replace_inputs:
    magnet: [Bz_method, Bzx_method]
    sample: [J, Gamma, spin_density, temperature, T1, T2]
    grid: [grid_array, grid_shape, grid_step, grid_voxel, extend_grid_method]
    cantilever: [dk_to_df_modulated]
