"""Cacluations related to field"""
import numpy as np
import numba as nb
from .math import as_strided_x


@nb.jit(nopython=True, parallel=True)
def B_offset(B_tot, f_rf, Gamma):
    """Calculate the resonance offset"""
    return B_tot - 2 * np.pi * f_rf / Gamma


def xtrapz_fxdtheta(method, ogrid, trapz_pts, xrange, x0):
    r"""Trapz summation to calculate

    .. math::
        \int_{xmin}^{xmax} f(x - x_0cos\theta)x_0cos\theta d\theta
    """

    theta = np.linspace(xrange[0], xrange[1], trapz_pts)
    grid_shape = tuple(np.prod(list(map(np.shape, ogrid)), axis=0))
    grid_shape_x = grid_shape[0]
    grid_dim = len(grid_shape)

    # calculate the new grid
    new_ogrid_shape = np.ones(grid_dim)
    new_ogrid_shape[0] = trapz_pts * grid_shape_x
    new_ogrid_shape = new_ogrid_shape.astype(int)

    # expand the dimension to (pts, 1, 1, 1)
    # expand the x grid dimension to (1, x_shape, 1, 1)
    # the result of addition is (pts, x_shape, 1, 1)
    # the final (x, y, z) is (pts * x_shape, 1, 1)
    grid_x = np.expand_dims(ogrid[0], axis=0)
    # dx = x0 * cos(theta)
    x = x0 * np.cos(theta)
    dx = np.expand_dims(x, axis=list(range(1, grid_dim + 1)))
    new_ogrid = [(grid_x - dx).reshape(new_ogrid_shape)] + ogrid[1:]

    # calculate the integral
    # new grid shape is (trapz_pts, x_shape, y_shape, z_shape)
    # dx has the shape of (trapz_pts, 1, 1, 1)
    # the multiplication is also an optimization here
    new_grid_shape = (trapz_pts,) + grid_shape
    integrand = method(*new_ogrid).reshape(new_grid_shape) * dx
    return np.trapz(integrand, x=theta, axis=0)


def xtrapz_field_gradient(Bzx_method, ext_pts, grid_step, sample_ogrid, trapz_pts):
    """Calculate CERMIT integral using Trapezoidal summation

    The integrand is odd function, therefore we can approximate the
    integral from -pi to pi, to -pi to 0. Here we make an important
    assumption that the magnet is symmetric in x direction. Therefore
    we approximate the integral from -np/2 to 0 and time the final result by 4.

    :param list sample_ogrid: ogrid generated by numpy ogrid
        For one dimensional grid, the ogrid should be encapsulated in a list
    """

    x_0p = (grid_step * ext_pts)[0]
    integral = xtrapz_fxdtheta(
        Bzx_method, sample_ogrid, trapz_pts, [-np.pi / 2, 0], x_0p
    )
    return (4 / x_0p**2) * integral
